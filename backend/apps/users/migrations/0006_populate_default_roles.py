# Generated by Django data migration
from django.db import migrations
from django.contrib.auth.models import Permission
from django.contrib.contenttypes.models import ContentType


def create_default_roles(apps, schema_editor):
    """Clear and recreate all roles to match the AppRoles enum."""
    Role = apps.get_model('users', 'Role')
    UserProfile = apps.get_model('users', 'UserProfile')
    
    # Clear user profiles' role assignments before deleting roles
    UserProfile.objects.update(role=None)
    
    # Delete all existing roles to avoid conflicts
    Role.objects.all().delete()
    
    # Define all roles from scratch with proper levels
    all_roles = [
        {
            'name': 'Superuser',
            'description': 'System superuser with full access to all features and data',
            'level': 0,
            'is_system_role': True,
            'is_active': True,
            'custom_permissions': {
                'can_impersonate': True,
                'can_manage_system': True,
                'can_view_audit_logs': True
            }
        },
        {
            'name': 'Administrator',
            'description': 'Administrator with access to manage users, roles, and system settings',
            'level': 1,
            'is_system_role': True,
            'is_active': True,
            'custom_permissions': {
                'can_manage_users': True,
                'can_manage_roles': True,
                'can_view_reports': True
            }
        },
        {
            'name': 'Supervisor',
            'description': 'Supervisor with access to manage teams and review work',
            'level': 2,
            'is_system_role': True,
            'is_active': True,
            'custom_permissions': {
                'can_manage_team': True,
                'can_approve_actions': True,
                'can_view_team_reports': True
            }
        },
        {
            'name': 'Manager',
            'description': 'Manager with access to oversee operations and resources',
            'level': 3,
            'is_system_role': True,
            'is_active': True,
            'custom_permissions': {
                'can_manage_resources': True,
                'can_view_analytics': True,
                'can_export_data': True
            }
        },
        {
            'name': 'Practitioner',
            'description': 'Practitioner with access to provide services and interact with clients',
            'level': 4,
            'is_system_role': True,
            'is_active': True,
            'custom_permissions': {
                'can_provide_services': True,
                'can_interact_with_clients': True,
                'can_create_referrals': True,
                'can_manage_caseload': True
            }
        },
        {
            'name': 'Staff',
            'description': 'Staff member with standard access to perform daily operations',
            'level': 5,
            'is_system_role': True,
            'is_active': True,
            'custom_permissions': {
                'can_view_clients': True,
                'can_edit_clients': True,
                'can_add_notes': True
            }
        },
        {
            'name': 'ReadOnlyUser',
            'description': 'Read-only user with view access to permitted data',
            'level': 6,
            'is_system_role': True,
            'is_active': True,
            'custom_permissions': {
                'can_view_only': True,
                'restricted_access': True
            }
        },
        {
            'name': 'RestrictedUser',
            'description': 'Restricted user with minimal access rights',
            'level': 7,
            'is_system_role': True,
            'is_active': True,
            'custom_permissions': {
                'limited_access': True,
                'requires_supervision': True
            }
        }
    ]
    
    # Create all roles
    created_roles = {}
    for role_data in all_roles:
        role = Role.objects.create(**role_data)
        created_roles[role.name] = role
        
    # Reassign Superuser role to the test user if it exists
    try:
        from django.contrib.auth import get_user_model
        User = get_user_model()
        test_user = User.objects.get(username='test.user@example.com')
        if hasattr(test_user, 'profile') and test_user.profile:
            test_user.profile.role = created_roles.get('Superuser')
            test_user.profile.save()
    except:
        # Test user doesn't exist yet, that's fine
        pass


def assign_permissions_to_roles(apps, schema_editor):
    """Assign Django permissions to roles based on their level and purpose."""
    Role = apps.get_model('users', 'Role')
    
    # Note: In a data migration, we can't directly use Permission.objects
    # We need to check if permissions exist first
    db_alias = schema_editor.connection.alias
    
    # Get all content types to find permissions
    ContentType = apps.get_model('contenttypes', 'ContentType')
    Permission = apps.get_model('auth', 'Permission')
    
    # Define permission mappings for each role
    permission_mappings = {
        'Administrator': [
            'add_user', 'change_user', 'delete_user', 'view_user',
            'add_role', 'change_role', 'delete_role', 'view_role',
            'add_userprofile', 'change_userprofile', 'delete_userprofile', 'view_userprofile',
            'add_grouprolemapping', 'change_grouprolemapping', 'delete_grouprolemapping', 'view_grouprolemapping',
        ],
        'Supervisor': [
            'view_user', 'change_user',
            'view_role',
            'view_userprofile', 'change_userprofile',
            'view_client', 'change_client', 'add_client',
            'view_referral', 'change_referral', 'add_referral',
        ],
        'Manager': [
            'view_user',
            'view_role',
            'view_userprofile',
            'view_client', 'change_client',
            'view_referral', 'change_referral',
            'view_externalorganisation', 'change_externalorganisation',
        ],
        'Practitioner': [  # Updated name
            'view_client', 'change_client', 'add_client',
            'view_referral', 'change_referral', 'add_referral',
            'view_externalorganisation',
            'add_document', 'change_document', 'view_document',
        ],
        'Staff': [
            'view_client', 'change_client',
            'view_referral', 'change_referral',
            'view_document', 'add_document',
        ],
        'ReadOnlyUser': [
            'view_client',
            'view_referral',
            'view_document',
            'view_externalorganisation',
        ],
        'RestrictedUser': [
            # Very limited permissions
            'view_client',
        ]
    }
    
    # Note: Superuser role doesn't need explicit permissions as they have all access
    
    # Assign permissions to roles
    for role_name, permission_codenames in permission_mappings.items():
        try:
            role = Role.objects.using(db_alias).get(name=role_name)
            
            # Get permissions
            permissions = Permission.objects.using(db_alias).filter(
                codename__in=permission_codenames
            )
            
            # In a data migration, we can't use role.permissions.set()
            # Instead, we'll store permission IDs in custom_permissions
            if permissions.exists():
                permission_ids = list(permissions.values_list('id', flat=True))
                role.custom_permissions['permission_ids'] = permission_ids
                role.save()
                
        except Role.DoesNotExist:
            print(f"Warning: Role {role_name} not found")
            continue


def reverse_roles(apps, schema_editor):
    """Remove default roles."""
    Role = apps.get_model('users', 'Role')
    Role.objects.filter(is_system_role=True).delete()


class Migration(migrations.Migration):
    dependencies = [
        ('users', '0005_enhanced_role_model'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.RunPython(create_default_roles, reverse_roles),
        migrations.RunPython(assign_permissions_to_roles, migrations.RunPython.noop),
    ]