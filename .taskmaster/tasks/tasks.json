{
  "tasks": [
    {
      "id": 6,
      "title": "Create External Organisation Management Django App",
      "description": "Develop a Django app to manage external organisations and their associated contacts. This includes models for organisations and contacts (referencing `backend/reference-projects/well-ahead-but-not-deployable/apps/external_organisation_management/models.py`), admin integration, and basic API endpoints for CRUD operations. This app is a foundational component for the referral system.",
      "details": "",
      "testStrategy": "",
      "status": "pending",
      "dependencies": [],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 7,
      "title": "Create Document Management Django App (core.Document)",
      "description": "Copy the Document model and related code from the reference app (core.Document) into a new Django app in backend/apps/core. Follow the same setup process as used for the users app: create apps.py, __init__.py, refactor imports and class names, and prepare for future INSTALLED_APPS registration. Do not register in INSTALLED_APPS yet.",
      "details": "",
      "testStrategy": "",
      "status": "pending",
      "dependencies": [],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 8,
      "title": "Create Cultural Group Management Django App (CulturalGroup)",
      "description": "Copy the CulturalGroup model and related code from the reference app into a new Django app in backend/apps/cultural_groups. Follow the same setup process as used for the users app: create apps.py, __init__.py, refactor imports and class names, and prepare for future INSTALLED_APPS registration. Do not register in INSTALLED_APPS yet.",
      "details": "",
      "testStrategy": "",
      "status": "pending",
      "dependencies": [],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 9,
      "title": "Create Client Management Django App (Client)",
      "description": "Copy the Client model and related code from the reference app into a new Django app in backend/apps/clients. Follow the same setup process as used for the users app: create apps.py, __init__.py, refactor imports and class names, and prepare for future INSTALLED_APPS registration. Do not register in INSTALLED_APPS yet.",
      "details": "",
      "testStrategy": "",
      "status": "pending",
      "dependencies": [],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 10,
      "title": "Create External Organisation Management Django App",
      "description": "Develop a Django app to manage external organisations and their associated contacts. Copy models, schemas, and Ninja API endpoints from the reference project. Remove any DRF dependencies, ensure Ninja/OpenAPI compatibility, and update tests accordingly.",
      "details": "1. Copy code from reference-projects/well-ahead-but-not-deployable/apps/external_organisation_management.\n2. Refactor for Django Ninja (no DRF).\n3. Ensure OpenAPI compatibility for frontend type generation.\n4. Update and pass all tests.\n5. Do not register in INSTALLED_APPS until confirmed.",
      "testStrategy": "",
      "status": "pending",
      "dependencies": [],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 11,
      "title": "Create Cultural Group Management Django App",
      "description": "Develop a Django app to manage cultural/ethnic groups for client/referral context. Copy models, schemas, and Ninja API endpoints from the reference project. Remove any DRF dependencies, ensure Ninja/OpenAPI compatibility, and update tests accordingly.",
      "details": "1. Copy code from reference-projects/well-ahead-but-not-deployable/apps/cultural_group_management.\n2. Refactor for Django Ninja (no DRF).\n3. Ensure OpenAPI compatibility for frontend type generation.\n4. Update and pass all tests.\n5. Do not register in INSTALLED_APPS until confirmed.",
      "testStrategy": "",
      "status": "pending",
      "dependencies": [],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 12,
      "title": "Create Client Management Django App",
      "description": "Develop a Django app to manage clients (case participants). Copy models, schemas, and Ninja API endpoints from the reference project. Remove any DRF dependencies, ensure Ninja/OpenAPI compatibility, and update tests accordingly. Include all required supporting models/utilities (e.g., option lists for ethnicities, identities).",
      "details": "1. Copy code from reference-projects/well-ahead-but-not-deployable/apps/client_management.\n2. Refactor for Django Ninja (no DRF).\n3. Ensure OpenAPI compatibility for frontend type generation.\n4. Update and pass all tests.\n5. Migrate and adapt any required supporting models/utilities.\n6. Do not register in INSTALLED_APPS until confirmed.",
      "testStrategy": "",
      "status": "pending",
      "dependencies": [],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 13,
      "title": "Create Referrals Core App",
      "description": "Develop the core Django app for referral workflow. Depends on Users, Programs, Clients, External Organisations, Cultural Groups, Documents, and Option Lists. Copy models, schemas, and Ninja API endpoints from the reference project. Remove any DRF dependencies, ensure Ninja/OpenAPI compatibility, and update tests accordingly.",
      "details": "1. Copy code from reference-projects/well-ahead-but-not-deployable/apps/referral_management.\n2. Refactor for Django Ninja (no DRF).\n3. Ensure OpenAPI compatibility for frontend type generation.\n4. Update and pass all tests.\n5. Integrate with foundational apps.\n6. Do not register in INSTALLED_APPS until confirmed.",
      "testStrategy": "",
      "status": "pending",
      "dependencies": [
        6,
        8,
        9
      ],
      "priority": "high",
      "subtasks": []
    }
  ]
}