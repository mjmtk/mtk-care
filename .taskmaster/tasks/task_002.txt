# Task ID: 2
# Title: Create Team Management Django App with Models, Schemas, and API Endpoints
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Develop a complete Team management system with Django models, Pydantic schemas, and Django Ninja API endpoints for team CRUD operations.
# Details:
This task involves creating a comprehensive team management system with the following components:

1. **Django App Creation**: Create a new Django app `apps.teams` with proper structure and configuration.

2. **Team Model Implementation**: 
   - Create `Team` model in `apps/teams/models.py` with fields:
     - `name` (CharField, max_length=255, unique=True)
     - `description` (TextField, blank=True)
     - `manager` (ForeignKey to User, on_delete=CASCADE, related_name='managed_teams')
     - `members` (ManyToManyField to User, blank=True, related_name='teams')
     - `is_active` (BooleanField, default=True)
     - `created_at` (DateTimeField, auto_now_add=True)
     - `updated_at` (DateTimeField, auto_now=True)
   - Add appropriate `__str__` method and Meta class with ordering

3. **Pydantic Schemas**: Create schemas in `apps/teams/schemas.py`:
   - `TeamSchema`: Complete team representation with all fields
   - `TeamCreateSchema`: Fields required for team creation (name, description, manager_id, member_ids)
   - `TeamUpdateSchema`: Optional fields for team updates with partial validation

4. **Django Ninja API Endpoints**: Implement in `apps/teams/api.py`:
   - `POST /teams/` - Create new team
   - `GET /teams/` - List all teams with filtering and pagination
   - `GET /teams/{team_id}/` - Retrieve specific team
   - `PUT /teams/{team_id}/` - Update team
   - `DELETE /teams/{team_id}/` - Delete team
   - Include proper error handling, validation, and response formatting

5. **Database Migration**: Create and apply Django migrations for the Team model.

6. **App Registration**: Add the teams app to Django settings and configure URL routing.

# Test Strategy:
Implement comprehensive testing strategy:

1. **Model Tests** (`tests/test_models.py`):
   - Test Team model creation with all fields
   - Verify ForeignKey relationship with User (manager)
   - Test ManyToManyField relationship with User (members)
   - Validate model constraints and field validations
   - Test string representation and model methods

2. **Schema Tests** (`tests/test_schemas.py`):
   - Validate TeamCreateSchema with valid and invalid data
   - Test TeamUpdateSchema partial updates
   - Verify TeamSchema serialization of model instances
   - Test schema validation errors and edge cases

3. **API Endpoint Tests** (`tests/test_api.py`):
   - Test POST /teams/ endpoint with valid and invalid data
   - Verify GET /teams/ returns paginated list of teams
   - Test GET /teams/{id}/ retrieves correct team
   - Validate PUT /teams/{id}/ updates team correctly
   - Test DELETE /teams/{id}/ removes team
   - Verify proper HTTP status codes and error responses
   - Test authentication and permission requirements

4. **Integration Tests**:
   - Test complete workflow: create team, add members, update, delete
   - Verify database constraints and cascading behaviors
   - Test API response formats match schema definitions

Run tests using `python manage.py test apps.teams` and ensure 100% test coverage.
