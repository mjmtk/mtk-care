# Generated by Django data migration to reorganize referral statuses for new workflow

from django.db import migrations
from django.utils import timezone


def reorganize_referral_statuses(apps, schema_editor):
    """Reorganize referral statuses to match the new workflow structure"""
    OptionList = apps.get_model('optionlists', 'OptionList')
    OptionListItem = apps.get_model('optionlists', 'OptionListItem')
    
    # Get the referral-statuses OptionList
    try:
        referral_statuses_list = OptionList.objects.get(pk=2, slug='referral-statuses')
    except OptionList.DoesNotExist:
        print("Warning: referral-statuses OptionList (pk=2) not found. Skipping migration.")
        return
    
    current_time = timezone.now()
    
    # First, update existing statuses to match the new structure
    status_updates = [
        # Update pk 13: Keep "Draft" but update description and sort order
        {
            'pk': 13,
            'name': 'draft',
            'slug': 'draft',
            'label': 'Draft',
            'description': 'Referral is being created or edited',
            'sort_order': 1,
        },
        # Update pk 12: "pending" -> "Pending Review"
        {
            'pk': 12,
            'name': 'pending_review',
            'slug': 'pending-review',
            'label': 'Pending Review',
            'description': 'Referral has been submitted and is awaiting triage/assessment',
            'sort_order': 2,
        },
        # Update pk 14: "in_progress" -> "Active"
        {
            'pk': 14,
            'name': 'active',
            'slug': 'active',
            'label': 'Active',
            'description': 'All requirements met, service delivery is active',
            'sort_order': 5,
        },
        # Update pk 15: "completed" (keep same, just update sort order)
        {
            'pk': 15,
            'name': 'completed',
            'slug': 'completed',
            'label': 'Completed',
            'description': 'Service episode has been completed',
            'sort_order': 6,
        },
        # Update pk 16: "cancelled" (keep same, just update sort order)
        {
            'pk': 16,
            'name': 'cancelled',
            'slug': 'cancelled',
            'label': 'Cancelled',
            'description': 'Referral has been cancelled for other reasons',
            'sort_order': 9,
        },
    ]
    
    # Statuses that might need to be created if they don't exist 
    # Note: pk 17 and 19 are actually priorities, not statuses, so we create new PKs for these
    status_updates_or_create = [        
        # Update pk 20: "ineligible" (keep same, just update sort order)
        {
            'pk': 20,
            'name': 'ineligible',
            'slug': 'ineligible',
            'label': 'Ineligible',
            'description': 'Client does not meet program criteria',
            'sort_order': 8,
        },
    ]
    
    # Create new status items for Awaiting Consent and Declined (using new PKs)
    additional_new_statuses = [
        # Create "Awaiting Consent" with new pk
        {
            'pk': 24,
            'name': 'awaiting_consent',
            'slug': 'awaiting-consent',
            'label': 'Awaiting Consent',
            'description': 'Client meets criteria but consent documents are needed',
            'sort_order': 4,
        },
        # Create "Declined" with new pk
        {
            'pk': 25,
            'name': 'declined',
            'slug': 'declined',
            'label': 'Declined',
            'description': 'Client has declined services',
            'sort_order': 7,
        },
    ]
    
    # Apply updates to existing statuses
    for update_data in status_updates:
        try:
            status_item = OptionListItem.objects.get(pk=update_data['pk'])
            status_item.name = update_data['name']
            status_item.slug = update_data['slug']
            status_item.label = update_data['label']
            status_item.description = update_data['description']
            status_item.sort_order = update_data['sort_order']
            status_item.updated_at = current_time
            status_item.save()
            print(f"Updated referral status: {update_data['label']} (pk={update_data['pk']})")
        except OptionListItem.DoesNotExist:
            print(f"Warning: Status item pk={update_data['pk']} not found, skipping update.")
    
    # Handle statuses that may need to be created or updated
    for update_data in status_updates_or_create:
        try:
            status_item = OptionListItem.objects.get(pk=update_data['pk'])
            # Update existing item
            status_item.name = update_data['name']
            status_item.slug = update_data['slug']
            status_item.label = update_data['label']
            status_item.description = update_data['description']
            status_item.sort_order = update_data['sort_order']
            status_item.updated_at = current_time
            status_item.save()
            print(f"Updated referral status: {update_data['label']} (pk={update_data['pk']})")
        except OptionListItem.DoesNotExist:
            # Create new item
            OptionListItem.objects.create(
                pk=update_data['pk'],
                option_list=referral_statuses_list,
                name=update_data['name'],
                slug=update_data['slug'],
                label=update_data['label'],
                description=update_data['description'],
                is_active=True,
                sort_order=update_data['sort_order'],
                global_option=False,
                metadata={},
                created_at=current_time,
                updated_at=current_time,
            )
            print(f"Created referral status: {update_data['label']} (pk={update_data['pk']})")
    
    # Add new statuses needed for the workflow 
    new_statuses = [
        {
            'pk': 23,  # Using next available pk
            'name': 'approved',
            'slug': 'approved',
            'label': 'Approved',
            'description': 'Referral has been approved for services and is ready for program assignment',
            'sort_order': 3,
        },
    ]
    
    # Combine with additional new statuses
    new_statuses.extend(additional_new_statuses)
    
    # Create new status items
    for status_data in new_statuses:
        if not OptionListItem.objects.filter(pk=status_data['pk']).exists():
            OptionListItem.objects.create(
                pk=status_data['pk'],
                option_list=referral_statuses_list,
                name=status_data['name'],
                slug=status_data['slug'],
                label=status_data['label'],
                description=status_data['description'],
                is_active=True,
                sort_order=status_data['sort_order'],
                global_option=False,
                metadata={},
                created_at=current_time,
                updated_at=current_time,
            )
            print(f"Created new referral status: {status_data['label']}")
        else:
            print(f"Referral status {status_data['label']} (pk={status_data['pk']}) already exists, skipping.")
    
    # Delete outdated statuses
    # Note: pk=18 is actually a priority (Medium), not a status, so we don't delete it
    outdated_statuses = [
        21,  # "awaiting_enrolment" - tracking via assigned_program/assigned_staff instead
        22,  # "enrolled" - tracking via assigned_program/assigned_staff instead
    ]
    
    deleted_items = []
    for pk in outdated_statuses:
        try:
            item = OptionListItem.objects.get(pk=pk)
            deleted_items.append((pk, item.label))
            item.delete()
            print(f"Deleted outdated referral status: {item.label} (pk={pk})")
        except OptionListItem.DoesNotExist:
            print(f"Status item pk={pk} not found, already deleted or never existed.")
    
    print("Referral status reorganization completed.")
    print("Current workflow order:")
    print("1. Draft (pk=13) - Being created/edited")
    print("2. Pending Review (pk=12) - Submitted, awaiting triage/assessment")
    print("3. Approved (pk=23) - Approved for services, ready for program assignment")
    print("4. Awaiting Consent (pk=24) - Client meets criteria but consent documents needed")
    print("5. Active (pk=14) - All requirements met, service delivery active")
    print("6. Completed (pk=15) - Service episode finished")
    print("7. Declined (pk=25) - Client declined services")
    print("8. Ineligible (pk=20) - Doesn't meet criteria")
    print("9. Cancelled (pk=16) - Cancelled for other reasons")


def reverse_reorganize_referral_statuses(apps, schema_editor):
    """Reverse the referral status reorganization (restore original state)"""
    OptionList = apps.get_model('optionlists', 'OptionList')
    OptionListItem = apps.get_model('optionlists', 'OptionListItem')
    
    # Get the referral-statuses OptionList
    try:
        referral_statuses_list = OptionList.objects.get(pk=2, slug='referral-statuses')
    except OptionList.DoesNotExist:
        print("Warning: referral-statuses OptionList (pk=2) not found. Skipping reverse migration.")
        return
    
    current_time = timezone.now()
    
    # Restore original status values
    original_statuses = [
        # Restore pk 13: Keep "Draft" but restore original sort order
        {
            'pk': 13,
            'name': 'draft',
            'slug': 'draft',
            'label': 'Draft',
            'description': 'Referral information is not yet complete.',
            'sort_order': 2,
        },
        # Restore pk 12: "Pending Review" -> "pending"
        {
            'pk': 12,
            'name': 'pending',
            'slug': 'pending',
            'label': 'Pending',
            'description': 'Referral is awaiting action.',
            'sort_order': 1,
        },
        # Restore pk 14: "Active" -> "in_progress"
        {
            'pk': 14,
            'name': 'in_progress',
            'slug': 'in-progress',
            'label': 'In Progress',
            'description': 'Referral is actively being processed.',
            'sort_order': 2,
        },
        # Restore pk 15: "completed" (restore original sort order)
        {
            'pk': 15,
            'name': 'completed',
            'slug': 'completed',
            'label': 'Completed',
            'description': 'Referral process has been completed.',
            'sort_order': 3,
        },
        # Restore pk 16: "cancelled" (restore original sort order)
        {
            'pk': 16,
            'name': 'cancelled',
            'slug': 'cancelled',
            'label': 'Cancelled',
            'description': 'Referral has been cancelled.',
            'sort_order': 4,
        },
        # Restore pk 17: "awaiting_consent" (restore original sort order)
        {
            'pk': 17,
            'name': 'awaiting_consent',
            'slug': 'awaiting-consent',
            'label': 'Awaiting Consent',
            'description': 'Client meets criteria but consent documents are needed before program enrollment',
            'sort_order': 20,
        },
        # Restore pk 19: "declined" (restore original sort order)
        {
            'pk': 19,
            'name': 'declined',
            'slug': 'declined',
            'label': 'Declined',
            'description': 'Client has declined services',
            'sort_order': 22,
        },
        # Restore pk 20: "ineligible" (restore original sort order)
        {
            'pk': 20,
            'name': 'ineligible',
            'slug': 'ineligible',
            'label': 'Ineligible',
            'description': 'Client does not meet program criteria',
            'sort_order': 23,
        },
    ]
    
    # Apply restoration to existing statuses
    for restore_data in original_statuses:
        try:
            status_item = OptionListItem.objects.get(pk=restore_data['pk'])
            status_item.name = restore_data['name']
            status_item.slug = restore_data['slug']
            status_item.label = restore_data['label']
            status_item.description = restore_data['description']
            status_item.sort_order = restore_data['sort_order']
            status_item.updated_at = current_time
            status_item.save()
            print(f"Restored referral status: {restore_data['label']} (pk={restore_data['pk']})")
        except OptionListItem.DoesNotExist:
            print(f"Warning: Status item pk={restore_data['pk']} not found during reverse migration.")
    
    # Delete the new statuses that were added
    new_status_pks = [23, 24, 25]  # Approved, Awaiting Consent, Declined
    for pk in new_status_pks:
        try:
            status = OptionListItem.objects.get(pk=pk)
            status.delete()
            print(f"Deleted '{status.label}' status (pk={pk})")
        except OptionListItem.DoesNotExist:
            print(f"Status (pk={pk}) not found, already deleted or never existed.")
    
    # Restore the deleted statuses
    # Note: We don't restore pk=18 as it was never a status (it's a priority)
    statuses_to_restore = [
        {
            'pk': 21,
            'name': 'awaiting_enrolment',
            'slug': 'awaiting-enrolment',
            'label': 'Awaiting Enrolment',
            'description': 'Assigned to program but not yet enrolled with staff',
            'sort_order': 24,
        },
        {
            'pk': 22,
            'name': 'enrolled',
            'slug': 'enrolled',
            'label': 'Enrolled',
            'description': 'Actively receiving services from assigned staff',
            'sort_order': 25,
        },
    ]
    
    # Recreate deleted status items
    for status_data in statuses_to_restore:
        if not OptionListItem.objects.filter(pk=status_data['pk']).exists():
            OptionListItem.objects.create(
                pk=status_data['pk'],
                option_list=referral_statuses_list,
                name=status_data['name'],
                slug=status_data['slug'],
                label=status_data['label'],
                description=status_data['description'],
                is_active=True,
                sort_order=status_data['sort_order'],
                global_option=False,
                metadata={},
                created_at=current_time,
                updated_at=current_time,
            )
            print(f"Restored referral status: {status_data['label']}")
        else:
            print(f"Status {status_data['label']} (pk={status_data['pk']}) already exists, skipping restoration.")
    
    print("Reverse referral status reorganization completed.")


class Migration(migrations.Migration):

    dependencies = [
        ('optionlists', '0003_add_enrolment_statuses'),
    ]

    operations = [
        migrations.RunPython(
            reorganize_referral_statuses,
            reverse_reorganize_referral_statuses,
            atomic=True,
        ),
    ]