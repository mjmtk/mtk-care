# Generated by Django data migration for enrolment workflow statuses

from django.db import migrations
from django.utils import timezone


def add_enrolment_statuses(apps, schema_editor):
    """Add new referral status options for enrolment workflow"""
    OptionList = apps.get_model('optionlists', 'OptionList')
    OptionListItem = apps.get_model('optionlists', 'OptionListItem')
    
    # Get the referral-statuses OptionList
    try:
        referral_statuses_list = OptionList.objects.get(pk=2, slug='referral-statuses')
    except OptionList.DoesNotExist:
        # If the referral-statuses list doesn't exist, we can't proceed
        print("Warning: referral-statuses OptionList (pk=2) not found. Skipping migration.")
        return
    
    # Define the new enrolment workflow statuses
    new_statuses = [
        {
            'pk': 21,
            'name': 'awaiting_enrolment',
            'slug': 'awaiting-enrolment',
            'label': 'Awaiting Enrolment',
            'description': 'Assigned to program but not yet enrolled with staff',
            'sort_order': 24,
        },
        {
            'pk': 22,
            'name': 'enrolled',
            'slug': 'enrolled',
            'label': 'Enrolled',
            'description': 'Actively receiving services from assigned staff',
            'sort_order': 25,
        },
    ]
    
    # Create the new OptionListItem records
    current_time = timezone.now()
    
    for status_data in new_statuses:
        # Check if item already exists to avoid duplicates
        if not OptionListItem.objects.filter(pk=status_data['pk']).exists():
            OptionListItem.objects.create(
                pk=status_data['pk'],
                option_list=referral_statuses_list,
                name=status_data['name'],
                slug=status_data['slug'],
                label=status_data['label'],
                description=status_data['description'],
                is_active=True,
                sort_order=status_data['sort_order'],
                global_option=False,
                metadata={},
                created_at=current_time,
                updated_at=current_time,
            )
            print(f"Created referral status: {status_data['label']}")
        else:
            print(f"Referral status {status_data['label']} (pk={status_data['pk']}) already exists, skipping.")


def remove_enrolment_statuses(apps, schema_editor):
    """Remove the enrolment workflow statuses (reverse migration)"""
    OptionListItem = apps.get_model('optionlists', 'OptionListItem')
    
    # Remove the enrolment workflow statuses by their PKs
    enrolment_status_pks = [21, 22]
    
    deleted_count = OptionListItem.objects.filter(pk__in=enrolment_status_pks).delete()[0]
    print(f"Removed {deleted_count} enrolment workflow status records")


class Migration(migrations.Migration):

    dependencies = [
        ('optionlists', '0002_add_consent_statuses'),
    ]

    operations = [
        migrations.RunPython(
            add_enrolment_statuses,
            remove_enrolment_statuses,
            atomic=True,
        ),
    ]