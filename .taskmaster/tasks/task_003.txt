# Task ID: 3
# Title: Implement Team Membership Management API Endpoints
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Add comprehensive team membership management endpoints to the teams API module, including adding members, removing members, and listing team members with appropriate permissions and validation.
# Details:
This task extends the existing teams API with membership management functionality:

1. **Schema Implementation**:
   - Create `TeamMemberSchema` in `apps/teams/schemas.py` with fields:
     - `user_id` (int, required for add/remove operations)
     - Optional fields for response schemas like `user_name`, `email`, `role`
   - Create `TeamMemberListSchema` for GET responses containing user details
   - Add validation to ensure user_id exists and is valid

2. **API Endpoints Implementation** in `apps/teams/api.py`:
   - **POST `/{team_id}/members/`**: Add user to team members
     - Accept `TeamMemberSchema` in request body
     - Validate team exists and user has permission (admin/team manager)
     - Check user_id exists in User model
     - Prevent duplicate memberships
     - Return success response with member details
   
   - **DELETE `/{team_id}/members/{user_id}/`**: Remove user from team
     - Validate team and user exist
     - Check permissions (admin/team manager, or user removing themselves)
     - Handle case where user is not a member
     - Return appropriate success/error responses
   
   - **GET `/{team_id}/members/`**: List all team members
     - Require authenticated user
     - Return paginated list of team members with user details
     - Include user information (name, email, join date)

3. **Permission Implementation**:
   - Create permission decorators/checks for team management operations
   - Admin users: full access to all operations
   - Team managers: can add/remove members for their teams
   - Regular users: can only view member lists and remove themselves
   - Implement proper error responses for unauthorized access

4. **Database Considerations**:
   - Ensure proper foreign key relationships between Team and User models
   - Add indexes for performance on team_id and user_id lookups
   - Consider using through model for additional membership metadata if needed

5. **Error Handling**:
   - Handle team not found (404)
   - Handle user not found (404)
   - Handle permission denied (403)
   - Handle duplicate membership attempts (400)
   - Provide clear error messages for all scenarios

# Test Strategy:
Comprehensive testing approach covering all endpoints and scenarios:

1. **Unit Tests for Schemas**:
   - Test `TeamMemberSchema` validation with valid/invalid user_ids
   - Test serialization/deserialization of member data
   - Verify schema field requirements and constraints

2. **API Endpoint Tests**:
   - **POST `/{team_id}/members/` Tests**:
     - Test successful member addition with valid data
     - Test adding member as admin user
     - Test adding member as team manager
     - Test permission denied for regular users
     - Test adding non-existent user (400 error)
     - Test adding to non-existent team (404 error)
     - Test duplicate membership prevention
   
   - **DELETE `/{team_id}/members/{user_id}/` Tests**:
     - Test successful member removal by admin
     - Test successful member removal by team manager
     - Test user removing themselves
     - Test permission denied scenarios
     - Test removing non-member user
     - Test removing from non-existent team
   
   - **GET `/{team_id}/members/` Tests**:
     - Test successful member list retrieval
     - Test pagination functionality
     - Test response format and data completeness
     - Test access by authenticated users
     - Test unauthorized access (401)
     - Test non-existent team (404)

3. **Permission Testing**:
   - Create test users with different roles (admin, team manager, regular user)
   - Test each endpoint with each user type
   - Verify proper permission enforcement
   - Test edge cases like team manager accessing other teams

4. **Integration Tests**:
   - Test complete workflows (add member → list members → remove member)
   - Test with real database transactions
   - Verify database state changes after operations
   - Test concurrent access scenarios

5. **Performance Tests**:
   - Test member list endpoint with large teams
   - Verify query efficiency and pagination
   - Test response times for all endpoints

6. **API Documentation Verification**:
   - Ensure all endpoints are properly documented
   - Verify request/response examples match implementation
   - Test API documentation examples work correctly
