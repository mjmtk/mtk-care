# Task ID: 1
# Title: Implement Complete Referrals Feature with Foundational Django Apps
# Status: pending
# Dependencies: None
# Priority: high
# Description: Build a comprehensive referrals system including four interconnected Django apps: OptionLists for dropdown management, External Organisation Management for providers/referrers, Service Management for referral targets, and Referral Management for the core functionality.
# Details:
This task involves creating four Django applications with complete CRUD functionality:

1. **OptionLists App**: Create models for managing dropdown choices used across the referrals system (e.g., referral statuses, priority levels, service categories). Include OptionList and OptionListItem models with fields for name, description, active status, and ordering.

2. **External Organisation Management App**: Implement models for external providers and referrers including Organisation, Contact, and Address models. Include fields for organisation name, type, contact details, service areas, and active status. Establish relationships between organisations and their contacts.

3. **Service Management App**: Create Service model with fields for name, description, category (linked to OptionLists), provider organisation (linked to External Organisation), capacity, availability, and eligibility criteria. Include ServiceCategory and ServiceEligibility models.

4. **Referral Management App**: Implement core Referral model with foreign keys to Service, referring organisation, client details, status (from OptionLists), priority, dates, and notes. Include ReferralHistory model for tracking status changes.

For each app, implement:
- Django models with proper relationships and constraints
- Pydantic schemas for request/response validation
- ViewSets with full CRUD operations using Django REST Framework
- Service layer classes for business logic
- Database migrations
- Admin interface registration
- URL routing configuration

Ensure proper dependency establishment: Referrals depend on Services and External Organisations, Services depend on OptionLists and External Organisations, and all apps use OptionLists for standardized choices.

# Test Strategy:
Verify implementation through comprehensive testing:

1. **Model Tests**: Test model creation, validation, relationships, and constraints for all models across the four apps. Verify foreign key relationships work correctly.

2. **API Endpoint Tests**: Test all CRUD operations for each app's endpoints using Django's test client. Verify proper HTTP status codes, request/response formats, and data validation.

3. **Pydantic Schema Tests**: Validate schema serialization/deserialization, field validation, and error handling for invalid data.

4. **Service Layer Tests**: Test business logic methods, data processing, and integration between different services.

5. **Integration Tests**: Create end-to-end test scenarios that create organisations, services, and referrals to verify the complete workflow functions correctly.

6. **Database Tests**: Verify migrations apply correctly, foreign key constraints work, and cascade deletions behave as expected.

7. **Admin Interface Tests**: Verify all models are properly registered and accessible through Django admin.

Test data should include edge cases like inactive organisations, services at capacity, and referrals with various status transitions. Use Django's TestCase class and factory_boy for test data generation.
