name: Build and deploy Node.js app to Azure Web App - mtk-care

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: npm install and build
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_PROD_API_BASE_URL: https://mtkcare-backend-abbffge3c9gqcqhr.newzealandnorth-01.azurewebsites.net
          NEXT_PUBLIC_AZURE_AD_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_AZURE_AD_CLIENT_ID }}
          NEXT_PUBLIC_AZURE_AD_TENANT_ID: ${{ secrets.NEXT_PUBLIC_AZURE_AD_TENANT_ID }}
          NEXT_PUBLIC_AZURE_AD_REDIRECT_URI: https://mtk-care.azurewebsites.net
        run: |
          npm ci
          npm run build
          
          # Verify Next.js build was created
          if [ ! -d ".next" ]; then
            echo "❌ ERROR: Next.js build failed - .next directory not found"
            exit 1
          fi
          
          echo "✅ Next.js build successful"
          ls -la .next/

      - name: Create deployment package  
        working-directory: ./frontend
        run: |
          echo "=== CREATING DEPLOYMENT PACKAGE ==="
          
          # Create deployment directory
          mkdir -p deploy
          
          # Copy all necessary files for Next.js to work
          echo "=== COPYING NEXT.JS BUILD ==="
          cp -r .next deploy/
          
          echo "=== COPYING SOURCE FILES ==="
          cp -r src deploy/
          cp -r public deploy/ 2>/dev/null || echo "No public directory"
          
          echo "=== COPYING CONFIG FILES ==="
          cp package.json deploy/
          cp package-lock.json deploy/
          cp next.config.ts deploy/
          
          echo "=== CREATING CUSTOM SERVER ==="
          cat > deploy/server.js << 'EOF'
          const { createServer } = require('http')
          const { parse } = require('url')
          const next = require('next')
          
          // Environment validation
          console.log('=== ENVIRONMENT CHECK ===')
          console.log('NODE_ENV:', process.env.NODE_ENV)
          console.log('PORT:', process.env.PORT)
          console.log('HOSTNAME:', process.env.HOSTNAME)
          console.log('Required env vars present:', {
            NEXTAUTH_SECRET: !!process.env.NEXTAUTH_SECRET,
            AZURE_AD_CLIENT_ID: !!process.env.AZURE_AD_CLIENT_ID,
            AZURE_AD_CLIENT_SECRET: !!process.env.AZURE_AD_CLIENT_SECRET
          })
          
          const dev = process.env.NODE_ENV !== 'production'
          const hostname = process.env.HOSTNAME || '0.0.0.0'
          const port = process.env.PORT || 8080
          
          // when using middleware `hostname` and `port` must be provided below
          const app = next({ dev, hostname, port })
          const handle = app.getRequestHandler()
          
          app.prepare().then(() => {
            createServer(async (req, res) => {
              try {
                // Be sure to pass `true` as the second argument to `url.parse`.
                // This tells it to parse the query portion of the URL.
                const parsedUrl = parse(req.url, true)
                const { pathname, query } = parsedUrl
          
                await handle(req, res, parsedUrl)
              } catch (err) {
                console.error('Error occurred handling', req.url, err)
                res.statusCode = 500
                res.end('internal server error')
              }
            })
              .once('error', (err) => {
                console.error(err)
                process.exit(1)
              })
              .listen(port, () => {
                console.log(`> Ready on http://${hostname}:${port}`)
              })
          })
          EOF
          
          # Create production package.json
          cat > deploy/package.json << 'EOF'
          {
            "name": "mtk-care-frontend",
            "version": "1.0.0",
            "scripts": {
              "start": "node server.js"
            },
            "dependencies": {
              "next": "15.3.3",
              "react": "^18.2.0",
              "react-dom": "^18.2.0",
              "@hookform/resolvers": "^5.0.1",
              "@radix-ui/react-alert-dialog": "^1.1.14",
              "@radix-ui/react-avatar": "^1.1.10",
              "@radix-ui/react-checkbox": "^1.3.2",
              "@radix-ui/react-dialog": "^1.1.14",
              "@radix-ui/react-dropdown-menu": "^2.1.15",
              "@radix-ui/react-label": "^2.1.7",
              "@radix-ui/react-navigation-menu": "^1.2.13",
              "@radix-ui/react-radio-group": "^1.3.7",
              "@radix-ui/react-select": "^2.2.5",
              "@radix-ui/react-slot": "^1.2.3",
              "@radix-ui/react-tabs": "^1.1.12",
              "axios": "^1.9.0",
              "class-variance-authority": "^0.7.1",
              "clsx": "^2.1.1",
              "lucide-react": "^0.511.0",
              "next-auth": "^4.24.11",
              "next-themes": "^0.4.6",
              "react-hook-form": "^7.57.0",
              "sonner": "^2.0.5",
              "tailwind-merge": "^3.3.0",
              "zod": "^3.25.48"
            },
            "engines": {
              "node": ">=18.0.0"
            }
          }
          EOF
          
          # Verification
          echo "=== DEPLOYMENT VERIFICATION ==="
          echo "Top level files:"
          ls -la deploy/
          echo ""
          echo "Check for .next directory:"
          ls -la deploy/.next/ || echo "❌ .next directory MISSING!"
          echo ""
          echo "Check for server.js:"
          ls -la deploy/server.js || echo "❌ server.js MISSING!"
          echo ""
          
          # Create zip
          echo "=== CREATING ZIP ==="
          cd deploy
          zip -r ../../release.zip .
          cd ..
          echo "Zip created, size:"
          ls -lh ../release.zip

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip
          if-no-files-found: error
          include-hidden-files: true

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: |
          unzip release.zip
          echo "=== POST-UNZIP VERIFICATION ==="
          echo "Current directory contents:"
          ls -la
          echo ""
          echo "Looking for server.js:"
          find . -name "server.js" -type f || echo "❌ server.js not found anywhere!"
          echo ""
          echo "Looking for .next directories:"
          find . -name ".next" -type d || echo "❌ No .next directories found!"
          echo ""
          echo "All files in current directory:"
          find . -type f | head -20
          echo ""
          echo "Directory tree (first 3 levels):"
          find . -maxdepth 3 -type d | sort

      - name: Set up Node.js for deployment
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          
      - name: Install production dependencies
        run: |
          echo "=== INSTALLING PRODUCTION DEPENDENCIES ==="
          npm ci --production --no-audit
          echo "=== VERIFYING NODE_MODULES ==="
          ls -la node_modules/ | head -10
          echo "Checking for Next.js:"
          ls -la node_modules/next/ || echo "❌ Next.js not found!"
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_27D3DBA1F4BF4F61A1DA99ED2DC5434D }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_9A08E8C1E9ED47899233F66B1E46B50D }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_16072FAAEABC4E46B8B9B8DB740F3639 }}

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'mtk-care'
          slot-name: 'Production'
          package: .

      - name: 'Post-deployment health check'
        run: |
          echo "=== WAITING FOR APP TO START ==="
          sleep 30
          
          echo "=== TESTING HEALTH ENDPOINT ==="
          for i in {1..5}; do
            if curl -f "${{ steps.deploy-to-webapp.outputs.webapp-url }}/api/health"; then
              echo "✅ Health check passed!"
              break
            else
              echo "❌ Health check failed, attempt $i/5"
              sleep 10
            fi
          done
          
          echo "=== TESTING MAIN PAGE ==="
          curl -I "${{ steps.deploy-to-webapp.outputs.webapp-url }}" || echo "❌ Main page not accessible"