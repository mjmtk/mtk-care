# Task ID: 5
# Title: Update Task Schemas to Support Team Assignment with Validation and Serialization
# Status: pending
# Dependencies: 4
# Priority: medium
# Description: Modify TaskSchema, TaskCreateSchema, and TaskUpdateSchema in apps.tasks.schemas.py to include team assignment functionality with proper validation and serialization.
# Details:
This task involves updating the Pydantic schemas in `apps/tasks/schemas.py` to support team assignment functionality:

1. **Update TaskSchema (Response Schema)**:
   - Add `assigned_team` field as an optional nested object containing team ID and name
   - Import necessary types: `from typing import Optional` and `from apps.teams.schemas import TeamSchema`
   - Implement field as: `assigned_team: Optional[TeamSchema] = None`
   - Ensure proper serialization from the Task model's ForeignKey relationship

2. **Update TaskCreateSchema (Input Schema)**:
   - Add `assigned_team_id` field as optional integer: `assigned_team_id: Optional[int] = None`
   - Implement custom validation to ensure the team ID exists in the database
   - Add validator method: `@validator('assigned_team_id')` to check team existence using `apps.teams.models.Team.objects.filter(id=value).exists()`

3. **Update TaskUpdateSchema (Input Schema)**:
   - Add `assigned_team_id` field as optional integer: `assigned_team_id: Optional[int] = None`
   - Implement same validation logic as TaskCreateSchema
   - Ensure partial updates work correctly when team assignment is not provided

4. **Schema Configuration**:
   - Update `Config` classes to handle ORM relationships properly
   - Ensure `from_attributes = True` is set for proper model serialization
   - Add appropriate field aliases if needed

5. **Import Management**:
   - Add necessary imports for team-related schemas and models
   - Ensure circular import issues are avoided by using string references where appropriate

6. **Validation Logic**:
   - Implement comprehensive validation for team assignment
   - Handle edge cases like invalid team IDs, deleted teams, or null assignments
   - Provide clear error messages for validation failures

# Test Strategy:
Implement comprehensive unit tests in `tests/test_tasks/test_schemas.py`:

1. **TaskSchema Response Tests**:
   - Test serialization of tasks with assigned teams (verify nested team data)
   - Test serialization of tasks without assigned teams (verify null handling)
   - Test that team information includes both ID and name fields
   - Verify proper JSON output format matches expected structure

2. **TaskCreateSchema Validation Tests**:
   - Test creation with valid team ID (should pass validation)
   - Test creation with invalid/non-existent team ID (should raise validation error)
   - Test creation without team assignment (should allow null)
   - Test creation with null team ID (should handle gracefully)
   - Verify error messages are clear and informative

3. **TaskUpdateSchema Validation Tests**:
   - Test update with valid team ID change
   - Test update with invalid team ID (should raise validation error)
   - Test partial update without team field (should not affect existing assignment)
   - Test update to remove team assignment (set to null)
   - Test update with same team ID (should be idempotent)

4. **Integration Tests**:
   - Create test fixtures with teams and tasks
   - Test end-to-end schema validation with actual model instances
   - Verify that schema changes work with Django Ninja API endpoints
   - Test serialization performance with multiple tasks and teams

5. **Edge Case Tests**:
   - Test with deleted teams (soft delete scenarios)
   - Test with very large team IDs
   - Test schema behavior with database constraints
   - Verify proper handling of concurrent team deletions during task updates
