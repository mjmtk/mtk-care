{
  "tasks": [
    {
      "id": 1,
      "title": "Implement Complete Referrals Feature with Foundational Django Apps",
      "description": "Build a comprehensive referrals system including four interconnected Django apps: OptionLists for dropdown management, External Organisation Management for providers/referrers, Service Management for referral targets, and Referral Management for the core functionality.",
      "details": "This task involves creating four Django applications with complete CRUD functionality:\n\n1. **OptionLists App**: Create models for managing dropdown choices used across the referrals system (e.g., referral statuses, priority levels, service categories). Include OptionList and OptionListItem models with fields for name, description, active status, and ordering.\n\n2. **External Organisation Management App**: Implement models for external providers and referrers including Organisation, Contact, and Address models. Include fields for organisation name, type, contact details, service areas, and active status. Establish relationships between organisations and their contacts.\n\n3. **Service Management App**: Create Service model with fields for name, description, category (linked to OptionLists), provider organisation (linked to External Organisation), capacity, availability, and eligibility criteria. Include ServiceCategory and ServiceEligibility models.\n\n4. **Referral Management App**: Implement core Referral model with foreign keys to Service, referring organisation, client details, status (from OptionLists), priority, dates, and notes. Include ReferralHistory model for tracking status changes.\n\nFor each app, implement:\n- Django models with proper relationships and constraints\n- Pydantic schemas for request/response validation\n- ViewSets with full CRUD operations using Django REST Framework\n- Service layer classes for business logic\n- Database migrations\n- Admin interface registration\n- URL routing configuration\n\nEnsure proper dependency establishment: Referrals depend on Services and External Organisations, Services depend on OptionLists and External Organisations, and all apps use OptionLists for standardized choices.",
      "testStrategy": "Verify implementation through comprehensive testing:\n\n1. **Model Tests**: Test model creation, validation, relationships, and constraints for all models across the four apps. Verify foreign key relationships work correctly.\n\n2. **API Endpoint Tests**: Test all CRUD operations for each app's endpoints using Django's test client. Verify proper HTTP status codes, request/response formats, and data validation.\n\n3. **Pydantic Schema Tests**: Validate schema serialization/deserialization, field validation, and error handling for invalid data.\n\n4. **Service Layer Tests**: Test business logic methods, data processing, and integration between different services.\n\n5. **Integration Tests**: Create end-to-end test scenarios that create organisations, services, and referrals to verify the complete workflow functions correctly.\n\n6. **Database Tests**: Verify migrations apply correctly, foreign key constraints work, and cascade deletions behave as expected.\n\n7. **Admin Interface Tests**: Verify all models are properly registered and accessible through Django admin.\n\nTest data should include edge cases like inactive organisations, services at capacity, and referrals with various status transitions. Use Django's TestCase class and factory_boy for test data generation.",
      "status": "pending",
      "dependencies": [],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 2,
      "title": "Create Team Management Django App with Models, Schemas, and API Endpoints",
      "description": "Develop a complete Team management system with Django models, Pydantic schemas, and Django Ninja API endpoints for team CRUD operations.",
      "details": "This task involves creating a comprehensive team management system with the following components:\n\n1. **Django App Creation**: Create a new Django app `apps.teams` with proper structure and configuration.\n\n2. **Team Model Implementation**: \n   - Create `Team` model in `apps/teams/models.py` with fields:\n     - `name` (CharField, max_length=255, unique=True)\n     - `description` (TextField, blank=True)\n     - `manager` (ForeignKey to User, on_delete=CASCADE, related_name='managed_teams')\n     - `members` (ManyToManyField to User, blank=True, related_name='teams')\n     - `is_active` (BooleanField, default=True)\n     - `created_at` (DateTimeField, auto_now_add=True)\n     - `updated_at` (DateTimeField, auto_now=True)\n   - Add appropriate `__str__` method and Meta class with ordering\n\n3. **Pydantic Schemas**: Create schemas in `apps/teams/schemas.py`:\n   - `TeamSchema`: Complete team representation with all fields\n   - `TeamCreateSchema`: Fields required for team creation (name, description, manager_id, member_ids)\n   - `TeamUpdateSchema`: Optional fields for team updates with partial validation\n\n4. **Django Ninja API Endpoints**: Implement in `apps/teams/api.py`:\n   - `POST /teams/` - Create new team\n   - `GET /teams/` - List all teams with filtering and pagination\n   - `GET /teams/{team_id}/` - Retrieve specific team\n   - `PUT /teams/{team_id}/` - Update team\n   - `DELETE /teams/{team_id}/` - Delete team\n   - Include proper error handling, validation, and response formatting\n\n5. **Database Migration**: Create and apply Django migrations for the Team model.\n\n6. **App Registration**: Add the teams app to Django settings and configure URL routing.",
      "testStrategy": "Implement comprehensive testing strategy:\n\n1. **Model Tests** (`tests/test_models.py`):\n   - Test Team model creation with all fields\n   - Verify ForeignKey relationship with User (manager)\n   - Test ManyToManyField relationship with User (members)\n   - Validate model constraints and field validations\n   - Test string representation and model methods\n\n2. **Schema Tests** (`tests/test_schemas.py`):\n   - Validate TeamCreateSchema with valid and invalid data\n   - Test TeamUpdateSchema partial updates\n   - Verify TeamSchema serialization of model instances\n   - Test schema validation errors and edge cases\n\n3. **API Endpoint Tests** (`tests/test_api.py`):\n   - Test POST /teams/ endpoint with valid and invalid data\n   - Verify GET /teams/ returns paginated list of teams\n   - Test GET /teams/{id}/ retrieves correct team\n   - Validate PUT /teams/{id}/ updates team correctly\n   - Test DELETE /teams/{id}/ removes team\n   - Verify proper HTTP status codes and error responses\n   - Test authentication and permission requirements\n\n4. **Integration Tests**:\n   - Test complete workflow: create team, add members, update, delete\n   - Verify database constraints and cascading behaviors\n   - Test API response formats match schema definitions\n\nRun tests using `python manage.py test apps.teams` and ensure 100% test coverage.",
      "status": "pending",
      "dependencies": [
        1
      ],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 3,
      "title": "Implement Team Membership Management API Endpoints",
      "description": "Add comprehensive team membership management endpoints to the teams API module, including adding members, removing members, and listing team members with appropriate permissions and validation.",
      "details": "This task extends the existing teams API with membership management functionality:\n\n1. **Schema Implementation**:\n   - Create `TeamMemberSchema` in `apps/teams/schemas.py` with fields:\n     - `user_id` (int, required for add/remove operations)\n     - Optional fields for response schemas like `user_name`, `email`, `role`\n   - Create `TeamMemberListSchema` for GET responses containing user details\n   - Add validation to ensure user_id exists and is valid\n\n2. **API Endpoints Implementation** in `apps/teams/api.py`:\n   - **POST `/{team_id}/members/`**: Add user to team members\n     - Accept `TeamMemberSchema` in request body\n     - Validate team exists and user has permission (admin/team manager)\n     - Check user_id exists in User model\n     - Prevent duplicate memberships\n     - Return success response with member details\n   \n   - **DELETE `/{team_id}/members/{user_id}/`**: Remove user from team\n     - Validate team and user exist\n     - Check permissions (admin/team manager, or user removing themselves)\n     - Handle case where user is not a member\n     - Return appropriate success/error responses\n   \n   - **GET `/{team_id}/members/`**: List all team members\n     - Require authenticated user\n     - Return paginated list of team members with user details\n     - Include user information (name, email, join date)\n\n3. **Permission Implementation**:\n   - Create permission decorators/checks for team management operations\n   - Admin users: full access to all operations\n   - Team managers: can add/remove members for their teams\n   - Regular users: can only view member lists and remove themselves\n   - Implement proper error responses for unauthorized access\n\n4. **Database Considerations**:\n   - Ensure proper foreign key relationships between Team and User models\n   - Add indexes for performance on team_id and user_id lookups\n   - Consider using through model for additional membership metadata if needed\n\n5. **Error Handling**:\n   - Handle team not found (404)\n   - Handle user not found (404)\n   - Handle permission denied (403)\n   - Handle duplicate membership attempts (400)\n   - Provide clear error messages for all scenarios",
      "testStrategy": "Comprehensive testing approach covering all endpoints and scenarios:\n\n1. **Unit Tests for Schemas**:\n   - Test `TeamMemberSchema` validation with valid/invalid user_ids\n   - Test serialization/deserialization of member data\n   - Verify schema field requirements and constraints\n\n2. **API Endpoint Tests**:\n   - **POST `/{team_id}/members/` Tests**:\n     - Test successful member addition with valid data\n     - Test adding member as admin user\n     - Test adding member as team manager\n     - Test permission denied for regular users\n     - Test adding non-existent user (400 error)\n     - Test adding to non-existent team (404 error)\n     - Test duplicate membership prevention\n   \n   - **DELETE `/{team_id}/members/{user_id}/` Tests**:\n     - Test successful member removal by admin\n     - Test successful member removal by team manager\n     - Test user removing themselves\n     - Test permission denied scenarios\n     - Test removing non-member user\n     - Test removing from non-existent team\n   \n   - **GET `/{team_id}/members/` Tests**:\n     - Test successful member list retrieval\n     - Test pagination functionality\n     - Test response format and data completeness\n     - Test access by authenticated users\n     - Test unauthorized access (401)\n     - Test non-existent team (404)\n\n3. **Permission Testing**:\n   - Create test users with different roles (admin, team manager, regular user)\n   - Test each endpoint with each user type\n   - Verify proper permission enforcement\n   - Test edge cases like team manager accessing other teams\n\n4. **Integration Tests**:\n   - Test complete workflows (add member → list members → remove member)\n   - Test with real database transactions\n   - Verify database state changes after operations\n   - Test concurrent access scenarios\n\n5. **Performance Tests**:\n   - Test member list endpoint with large teams\n   - Verify query efficiency and pagination\n   - Test response times for all endpoints\n\n6. **API Documentation Verification**:\n   - Ensure all endpoints are properly documented\n   - Verify request/response examples match implementation\n   - Test API documentation examples work correctly",
      "status": "pending",
      "dependencies": [
        2
      ],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 4,
      "title": "Add Team Assignment Field to Task Model with Database Migration",
      "description": "Modify the existing Task model to include a team assignment field, create and apply database migration, and implement comprehensive unit tests.",
      "details": "This task involves modifying the existing Task model in `apps.tasks.models.py` to support team assignments:\n\n1. **Model Modification**:\n   - Add import statement: `from apps.teams.models import Team`\n   - Add new field to Task model: `assigned_team = models.ForeignKey('teams.Team', on_delete=models.SET_NULL, null=True, blank=True, related_name='tasks')`\n   - Ensure the field allows null values to support tasks not assigned to any team\n   - Use SET_NULL on delete to preserve task data when teams are deleted\n\n2. **Database Migration**:\n   - Generate migration: `python manage.py makemigrations tasks`\n   - Review the generated migration file to ensure correctness\n   - Apply migration: `python manage.py migrate`\n   - Verify migration was applied successfully\n\n3. **Model Considerations**:\n   - The ForeignKey uses string reference 'teams.Team' to avoid circular import issues\n   - SET_NULL ensures data integrity when teams are deleted\n   - related_name='tasks' allows reverse lookup from Team to associated tasks\n   - null=True, blank=True makes the field optional\n\n4. **Code Quality**:\n   - Ensure proper import organization\n   - Add appropriate model documentation/comments\n   - Verify no circular import issues",
      "testStrategy": "Implement comprehensive unit tests to verify the team assignment functionality:\n\n1. **Model Field Tests**:\n   - Test creating a task without team assignment (should work with null value)\n   - Test creating a task with valid team assignment\n   - Test that assigned_team field accepts null values\n   - Test that assigned_team field accepts valid Team instances\n\n2. **Foreign Key Relationship Tests**:\n   - Test reverse relationship: verify team.tasks.all() returns associated tasks\n   - Test CASCADE behavior: when team is deleted, task.assigned_team becomes null\n   - Test multiple tasks can be assigned to the same team\n\n3. **Migration Tests**:\n   - Verify migration runs without errors\n   - Test that existing tasks remain intact after migration\n   - Verify new field is properly added to database schema\n\n4. **Integration Tests**:\n   - Test task creation via API with team assignment\n   - Test task update to change team assignment\n   - Test filtering tasks by assigned team\n\n5. **Edge Case Tests**:\n   - Test assigning non-existent team (should raise error)\n   - Test removing team assignment (setting to null)\n   - Test database constraints are properly enforced",
      "status": "pending",
      "dependencies": [
        2
      ],
      "priority": "high",
      "subtasks": []
    },
    {
      "id": 5,
      "title": "Update Task Schemas to Support Team Assignment with Validation and Serialization",
      "description": "Modify TaskSchema, TaskCreateSchema, and TaskUpdateSchema in apps.tasks.schemas.py to include team assignment functionality with proper validation and serialization.",
      "details": "This task involves updating the Pydantic schemas in `apps/tasks/schemas.py` to support team assignment functionality:\n\n1. **Update TaskSchema (Response Schema)**:\n   - Add `assigned_team` field as an optional nested object containing team ID and name\n   - Import necessary types: `from typing import Optional` and `from apps.teams.schemas import TeamSchema`\n   - Implement field as: `assigned_team: Optional[TeamSchema] = None`\n   - Ensure proper serialization from the Task model's ForeignKey relationship\n\n2. **Update TaskCreateSchema (Input Schema)**:\n   - Add `assigned_team_id` field as optional integer: `assigned_team_id: Optional[int] = None`\n   - Implement custom validation to ensure the team ID exists in the database\n   - Add validator method: `@validator('assigned_team_id')` to check team existence using `apps.teams.models.Team.objects.filter(id=value).exists()`\n\n3. **Update TaskUpdateSchema (Input Schema)**:\n   - Add `assigned_team_id` field as optional integer: `assigned_team_id: Optional[int] = None`\n   - Implement same validation logic as TaskCreateSchema\n   - Ensure partial updates work correctly when team assignment is not provided\n\n4. **Schema Configuration**:\n   - Update `Config` classes to handle ORM relationships properly\n   - Ensure `from_attributes = True` is set for proper model serialization\n   - Add appropriate field aliases if needed\n\n5. **Import Management**:\n   - Add necessary imports for team-related schemas and models\n   - Ensure circular import issues are avoided by using string references where appropriate\n\n6. **Validation Logic**:\n   - Implement comprehensive validation for team assignment\n   - Handle edge cases like invalid team IDs, deleted teams, or null assignments\n   - Provide clear error messages for validation failures",
      "testStrategy": "Implement comprehensive unit tests in `tests/test_tasks/test_schemas.py`:\n\n1. **TaskSchema Response Tests**:\n   - Test serialization of tasks with assigned teams (verify nested team data)\n   - Test serialization of tasks without assigned teams (verify null handling)\n   - Test that team information includes both ID and name fields\n   - Verify proper JSON output format matches expected structure\n\n2. **TaskCreateSchema Validation Tests**:\n   - Test creation with valid team ID (should pass validation)\n   - Test creation with invalid/non-existent team ID (should raise validation error)\n   - Test creation without team assignment (should allow null)\n   - Test creation with null team ID (should handle gracefully)\n   - Verify error messages are clear and informative\n\n3. **TaskUpdateSchema Validation Tests**:\n   - Test update with valid team ID change\n   - Test update with invalid team ID (should raise validation error)\n   - Test partial update without team field (should not affect existing assignment)\n   - Test update to remove team assignment (set to null)\n   - Test update with same team ID (should be idempotent)\n\n4. **Integration Tests**:\n   - Create test fixtures with teams and tasks\n   - Test end-to-end schema validation with actual model instances\n   - Verify that schema changes work with Django Ninja API endpoints\n   - Test serialization performance with multiple tasks and teams\n\n5. **Edge Case Tests**:\n   - Test with deleted teams (soft delete scenarios)\n   - Test with very large team IDs\n   - Test schema behavior with database constraints\n   - Verify proper handling of concurrent team deletions during task updates",
      "status": "pending",
      "dependencies": [
        4
      ],
      "priority": "medium",
      "subtasks": []
    }
  ]
}