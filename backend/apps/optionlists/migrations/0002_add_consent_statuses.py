# Generated by Django data migration for consent workflow statuses

from django.db import migrations
from django.utils import timezone


def add_consent_statuses(apps, schema_editor):
    """Add new referral status options for consent workflow"""
    OptionList = apps.get_model('optionlists', 'OptionList')
    OptionListItem = apps.get_model('optionlists', 'OptionListItem')
    
    # Get the referral-statuses OptionList
    try:
        referral_statuses_list = OptionList.objects.get(pk=2, slug='referral-statuses')
    except OptionList.DoesNotExist:
        # If the referral-statuses list doesn't exist, we can't proceed
        print("Warning: referral-statuses OptionList (pk=2) not found. Skipping migration.")
        return
    
    # Define the new consent workflow statuses
    new_statuses = [
        {
            'pk': 17,
            'name': 'awaiting_consent',
            'slug': 'awaiting-consent',
            'label': 'Awaiting Consent',
            'description': 'Client meets criteria but consent documents are needed before program enrollment',
            'sort_order': 20,
        },
        {
            'pk': 18,
            'name': 'consent_received',
            'slug': 'consent-received',
            'label': 'Consent Received',
            'description': 'Client has provided consent and is ready for program enrollment',
            'sort_order': 21,
        },
        {
            'pk': 19,
            'name': 'declined',
            'slug': 'declined',
            'label': 'Declined',
            'description': 'Client has declined services',
            'sort_order': 22,
        },
        {
            'pk': 20,
            'name': 'ineligible',
            'slug': 'ineligible',
            'label': 'Ineligible',
            'description': 'Client does not meet program criteria',
            'sort_order': 23,
        },
    ]
    
    # Create the new OptionListItem records
    current_time = timezone.now()
    
    for status_data in new_statuses:
        # Check if item already exists to avoid duplicates
        if not OptionListItem.objects.filter(pk=status_data['pk']).exists():
            OptionListItem.objects.create(
                pk=status_data['pk'],
                option_list=referral_statuses_list,
                name=status_data['name'],
                slug=status_data['slug'],
                label=status_data['label'],
                description=status_data['description'],
                is_active=True,
                sort_order=status_data['sort_order'],
                global_option=False,
                metadata={},
                created_at=current_time,
                updated_at=current_time,
            )
            print(f"Created referral status: {status_data['label']}")
        else:
            print(f"Referral status {status_data['label']} (pk={status_data['pk']}) already exists, skipping.")


def remove_consent_statuses(apps, schema_editor):
    """Remove the consent workflow statuses (reverse migration)"""
    OptionListItem = apps.get_model('optionlists', 'OptionListItem')
    
    # Remove the consent workflow statuses by their PKs
    consent_status_pks = [17, 18, 19, 20]
    
    deleted_count = OptionListItem.objects.filter(pk__in=consent_status_pks).delete()[0]
    print(f"Removed {deleted_count} consent workflow status records")


class Migration(migrations.Migration):

    dependencies = [
        ('optionlists', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(
            add_consent_statuses,
            remove_consent_statuses,
            atomic=True,
        ),
    ]